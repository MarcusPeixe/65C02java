import java.io.FileInputStream;
import java.util.Scanner;

class TestChip {
	
	static class MyMapper implements Mapper {

		private static final int RAM_SIZE = 0x0001_0000;
		private int[] ram;
		private boolean brk;
		private Chip65C02 chip;

		MyMapper() {
			final int PROGRAM_LOCATION = 0x0400;
			ram = new int[RAM_SIZE];
			try {
				FileInputStream f = new FileInputStream("65C02_extended_opcodes_test.bin");
				for (int i = 0; i < RAM_SIZE; i++) {
					// int b = f.read();
						ram[i] = f.read();
				}
				f.close();
			}
			catch (Exception e) {
				System.out.println("Error");
				System.exit(1);
			}
			// final int[] program = {
			// 	0xE6, 0x02, 0xA5, 0x02, 0xC9, 0x0A, 0x30, 0xF8,
			// 	0x00, 0xEA, 0x00, 0xEA, 0x4C, 0x0C, 0x02
			// };
			// final int[] program = {
			// 	0XA2, 0X08, 0X8A, 0X95, 0X08, 0XE8, 0XD0, 0XFA,
			// 	0XF0, 0XFE
			// };
			// final int[] program = {
			// 	0xA2, 0x00, 0xA9, 0x09, 0x9D, 0x00, 0x02, 0x9D,
			// 	0x00, 0x03, 0xE8, 0x8A, 0x29, 0x0F, 0xD0, 0x05,
			// 	0x18, 0x8A, 0x69, 0x10, 0xAA, 0xD0, 0xEB, 0x00
			// };
			// final int[] program = {
			// 	0xA2, 0x00, 0x8A, 0x9D, 0x00, 0x02, 0xE8, 0xD0,
			// 	0xF9, 0xEA, 0xEA, 0xEA, 0x00
			// };
			// final int[] program = {
			// 	0xA9, 0x04, 0x85, 0x00, 0xA9, 0x01, 0x85, 0x01, 
			// 	0x58, 0x20, 0x95, 0x06, 0xA9, 0xA9, 0x85, 0x02, 
			// 	0xA9, 0x06, 0x85, 0x03, 0x20, 0x2D, 0x06, 0xE6, 
			// 	0x00, 0xE6, 0x01, 0x00, 0x58, 0x68, 0x29, 0x10, 
			// 	0xD0, 0x05, 0x68, 0x68, 0x4C, 0x08, 0x06, 0x58, 
			// 	0x68, 0x68, 0x4C, 0x08, 0x06, 0xA9, 0x00, 0x85, 
			// 	0x04, 0xA9, 0x00, 0x85, 0x05, 0xA5, 0x05, 0xC9, 
			// 	0x10, 0x10, 0x59, 0xA9, 0x00, 0x85, 0x06, 0xA5, 
			// 	0x06, 0xC9, 0x10, 0x10, 0x4A, 0x18, 0xA5, 0x00, 
			// 	0x65, 0x06, 0xC9, 0x20, 0x10, 0x2F, 0x85, 0x07, 
			// 	0x18, 0xA5, 0x01, 0x65, 0x05, 0xC9, 0x20, 0x10, 
			// 	0x3B, 0x85, 0x08, 0xA5, 0x08, 0x85, 0x09, 0xA9, 
			// 	0x00, 0x85, 0x0A, 0xA2, 0x05, 0x06, 0x09, 0x26, 
			// 	0x0A, 0xCA, 0xD0, 0xF9, 0xA5, 0x09, 0x05, 0x07, 
			// 	0x85, 0x09, 0x18, 0xA5, 0x0A, 0x69, 0x02, 0x85, 
			// 	0x0A, 0xA1, 0x02, 0x81, 0x09, 0x18, 0xA5, 0x02, 
			// 	0x69, 0x01, 0x85, 0x02, 0xA5, 0x03, 0x69, 0x00, 
			// 	0x85, 0x03, 0xE6, 0x06, 0x4C, 0x3F, 0x06, 0xE6, 
			// 	0x05, 0x4C, 0x35, 0x06, 0x60, 0xA9, 0x00, 0xA2, 
			// 	0x00, 0x9D, 0x00, 0x02, 0x9D, 0x00, 0x03, 0x9D, 
			// 	0x00, 0x04, 0x9D, 0x00, 0x05, 0xE8, 0xD0, 0xF1, 
			// 	0x60, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 
			// 	0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 
			// 	0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 
			// 	0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 
			// 	0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 
			// 	0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 
			// 	0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 
			// 	0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 
			// 	0xBF, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 
			// 	0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 
			// 	0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 
			// 	0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 
			// 	0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 
			// 	0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 
			// 	0xAF, 0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 
			// 	0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 
			// 	0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 
			// 	0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 
			// 	0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 
			// 	0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 
			// 	0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 
			// 	0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 
			// 	0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 
			// 	0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 
			// 	0xFF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 
			// 	0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 
			// 	0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 
			// 	0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 
			// 	0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 
			// 	0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 
			// 	0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 
			// 	0xF7, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 
			// 	0xFF, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 
			// 	0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 
			// 	0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x97, 
			// 	0xBF, 0xBF, 0x97, 0x90, 0x90, 0x90, 0x90, 0x90, 
			// 	0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x97, 0xBF, 
			// 	0xBF, 0x97, 0x97, 0x97, 0x90, 0x90, 0x90, 0x90, 
			// 	0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x97, 0xBF, 
			// 	0xBF, 0x97, 0x97, 0x97, 0x90, 0x90, 0x90, 0x90, 
			// 	0x90, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0x97, 0x97, 
			// 	0xBF, 0x97, 0x97, 0x97, 0xA0, 0xA0, 0xA0, 0xA0, 
			// 	0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xBF, 
			// 	0xAB, 0xAB, 0xAB, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 
			// 	0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xAB, 
			// 	0xBF, 0xAB, 0xAB, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 
			// 	0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 0xAB, 
			// 	0xAB, 0xAB, 0xAB, 0xA0, 0xA0, 0xA0, 0xA0, 0xA0, 
			// 	0xA0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 0xBF, 
			// 	0xAB, 0xAB, 0xAB, 0xB0, 0xB0, 0xB0, 0xB0, 0xB0, 
			// 	0xB0, 0xB0, 0xB0, 0xB0, 0xAB, 0xAB, 0xAB, 0xAB, 
			// 	0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xB0, 0xB0, 
			// 	0xB0, 0xB0, 0xB0, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 
			// 	0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xB0, 
			// 	0xB0, 0xB0, 0xB0, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 
			// 	0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xB0, 
			// 	0xB0, 0xB5, 0xB5, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 
			// 	0xB5, 0xB5, 0xAB, 0xAB, 0xAB, 0xAB, 0xAB, 0xB5, 
			// 	0xB5, 0xB5, 0xB5, 0xB5, 0xAB, 0xAB, 0xAB, 0xB5, 
			// 	0xB5, 0xB5, 0xB5, 0xAB, 0xAB, 0xAB, 0xB5, 0xB5, 
			// 	0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 
			// 	0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 
			// 	0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 
			// 	0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 0xB5, 
			// 	0xB5, 
			// };
			// final int[] program = {

			// }
			// for (int i = 0; i < RAM_SIZE; i++) {
			// 	ram[i] = 0x00;
			// }
			// for (int i = 0; i < program.length; i++) {
			// 	ram[PROGRAM_LOCATION + i] = program[i];
			// }
			// ram[0xFFFC] = PROGRAM_LOCATION & 0x0F;
			// ram[0xFFFD] = PROGRAM_LOCATION >> 8;
			// brk = false;
			// ram[0xFFFE] = 0x1C;
			// ram[0xFFFF] = 0x06;
		}

		public boolean getBrk() {
			return brk;
		}

		public void setBrk(boolean brk) {
			this.brk = brk;
		}

		public void setChip(Chip65C02 chip) {
			this.chip = chip;
		}

		public int read(int addr, boolean sync) {
			int value = ram[addr];
			System.out.printf(
				"Reading value 0x%02X from $%04X %s\n",
				value, addr, sync? "(SYNC)": ""
			);
			final String[] instruction = {
				"BRK", "ORA", "NOP", "NOP", "TSB", "ORA", "ASL", "RMB0", "PHP", "ORA", "ASL", "NOP", "TSB", "ORA", "ASL", "BBR0",
				"BPL", "ORA", "ORA", "NOP", "TRB", "ORA", "ASL", "RMB1", "CLC", "ORA", "INC", "NOP", "TRB", "ORA", "ASL", "BBR1",
				"JSR", "AND", "NOP", "NOP", "BIT", "AND", "ROL", "RMB2", "PLP", "AND", "ROL", "NOP", "BIT", "AND", "ROL", "BBR2",
				"BMI", "AND", "AND", "NOP", "BIT", "AND", "ROL", "RMB3", "SEC", "AND", "DEC", "NOP", "BIT", "AND", "ROL", "BBR3",
				"RTI", "EOR", "NOP", "NOP", "NOP", "EOR", "LSR", "RMB4", "PHA", "EOR", "LSR", "NOP", "JMP", "EOR", "LSR", "BBR4",
				"BVC", "EOR", "EOR", "NOP", "NOP", "EOR", "LSR", "RMB5", "CLI", "EOR", "PHY", "NOP", "NOP", "EOR", "LSR", "BBR5",
				"RTS", "ADC", "NOP", "NOP", "STZ", "ADC", "ROR", "RMB6", "PLA", "ADC", "ROR", "NOP", "JMP", "ADC", "ROR", "BBR6",
				"BVS", "ADC", "ADC", "NOP", "STZ", "ADC", "ROR", "RMB7", "SEI", "ADC", "PLY", "NOP", "JMP", "ADC", "ROR", "BBR7",
				"BRA", "STA", "NOP", "NOP", "STY", "STA", "STX", "SMB0", "DEY", "BIT", "TXA", "NOP", "STY", "STA", "STX", "BBS0",
				"BCC", "STA", "STA", "NOP", "STY", "STA", "STX", "SMB1", "TYA", "STA", "TXS", "NOP", "STZ", "STA", "STZ", "BBS1",
				"LDY", "LDA", "LDX", "NOP", "LDY", "LDA", "LDX", "SMB2", "TAY", "LDA", "TAX", "NOP", "LDY", "LDA", "LDX", "BBS2",
				"BCS", "LDA", "LDA", "NOP", "LDY", "LDA", "LDX", "SMB3", "CLV", "LDA", "TSX", "NOP", "LDY", "LDA", "LDX", "BBS3",
				"CPY", "CMP", "NOP", "NOP", "CPY", "CMP", "DEC", "SMB4", "INY", "CMP", "DEX", "WAI", "CPY", "CMP", "DEC", "BBS4",
				"BNE", "CMP", "CMP", "NOP", "NOP", "CMP", "DEC", "SMB5", "CLD", "CMP", "PHX", "STP", "NOP", "CMP", "DEC", "BBS5",
				"CPX", "SBC", "NOP", "NOP", "CPX", "SBC", "INC", "SMB6", "INX", "SBC", "NOP", "SBC", "CPX", "SBC", "INC", "BBS6",
				"BEQ", "SBC", "SBC", "NOP", "NOP", "SBC", "INC", "SMB7", "SED", "SBC", "PLX", "NOP", "NOP", "SBC", "INC", "BBS7",
			};
			final String[] addressing = {
				"Impl", "IndX", "Impl", "IndX", "Zrpg", "Zrpg", "Zrpg", "Zrpg", "Impl", "Imme", "Accu", "Imme", "Abso", "Abso", "Abso", "ZRel",
				"Rltv", "IndY", "ZpIn", "IndY", "Zrpg", "ZrpX", "ZrpX", "Zrpg", "Impl", "AbsY", "Accu", "AbsY", "Abso", "AbsX", "AbsX", "ZRel",
				"Abso", "IndX", "Impl", "IndX", "Zrpg", "Zrpg", "Zrpg", "Zrpg", "Impl", "Imme", "Accu", "Imme", "Abso", "Abso", "Abso", "ZRel",
				"Rltv", "IndY", "ZpIn", "IndY", "ZrpX", "ZrpX", "ZrpX", "Zrpg", "Impl", "AbsY", "Accu", "AbsY", "AbsX", "AbsX", "AbsX", "ZRel",
				"Impl", "IndX", "Impl", "IndX", "Indr", "Zrpg", "Zrpg", "Zrpg", "Impl", "Imme", "Accu", "Imme", "Abso", "Abso", "Abso", "ZRel",
				"Rltv", "IndY", "ZpIn", "IndY", "ZrpX", "ZrpX", "ZrpX", "Zrpg", "Impl", "AbsY", "Impl", "AbsY", "AbsX", "AbsX", "AbsX", "ZRel",
				"Impl", "IndX", "Impl", "IndX", "Zrpg", "Zrpg", "Zrpg", "Zrpg", "Impl", "Imme", "Accu", "Imme", "Indr", "Abso", "Abso", "ZRel",
				"Rltv", "IndY", "ZpIn", "IndY", "ZrpX", "ZrpX", "ZrpX", "Zrpg", "Impl", "AbsY", "Impl", "AbsY", "AbIX", "AbsX", "AbsX", "ZRel",
				"Rltv", "IndX", "Imme", "IndX", "Zrpg", "Zrpg", "Zrpg", "Zrpg", "Impl", "Imme", "Impl", "Imme", "Abso", "Abso", "Abso", "ZRel",
				"Rltv", "IndY", "ZpIn", "IndY", "ZrpX", "ZrpX", "ZrpY", "Zrpg", "Impl", "AbsY", "Impl", "AbsY", "Abso", "AbsX", "AbsX", "ZRel",
				"Imme", "IndX", "Imme", "IndX", "Zrpg", "Zrpg", "Zrpg", "Zrpg", "Impl", "Imme", "Impl", "Imme", "Abso", "Abso", "Abso", "ZRel",
				"Rltv", "IndY", "ZpIn", "IndY", "ZrpX", "ZrpX", "ZrpY", "Zrpg", "Impl", "AbsY", "Impl", "AbsY", "AbsX", "AbsX", "AbsY", "ZRel",
				"Imme", "IndX", "Imme", "IndX", "Zrpg", "Zrpg", "Zrpg", "Zrpg", "Impl", "Imme", "Impl", "Impl", "Abso", "Abso", "Abso", "ZRel",
				"Rltv", "IndY", "ZpIn", "IndY", "ZrpX", "ZrpX", "ZrpX", "Zrpg", "Impl", "AbsY", "Impl", "Impl", "AbsX", "AbsX", "AbsX", "ZRel",
				"Imme", "IndX", "Imme", "IndX", "Zrpg", "Zrpg", "Zrpg", "Zrpg", "Impl", "Imme", "Impl", "Imme", "Abso", "Abso", "Abso", "ZRel",
				"Rltv", "IndY", "ZpIn", "IndY", "ZrpX", "ZrpX", "ZrpX", "Zrpg", "Impl", "AbsY", "Impl", "AbsY", "AbsX", "AbsX", "AbsX", "ZRel",
			};
			if (sync) {
				System.out.printf("\n\n%04X : %s <%s>\n", addr, instruction[value], addressing[value]);
				
				if (addr > 0x2750) {
					System.out.printf("Press ENTER to continue: ");
					new Scanner(System.in).nextLine();
				}
				// try {
				// 	Thread.sleep(1000);
				// }
				// catch (Exception e) {
				// 	System.out.println("Error in Thread.sleep(): " + e.getMessage());
				// }
			}
			return value;
		}
		public void write(int addr, int value) {
			System.out.printf("Writing value 0x%02X to $%04X\n", value, addr);
			ram[addr] = value;
		}

		public void onVectorPull(int addr) {
			System.out.printf("Pulling vector $%04X\n", addr);
			// if (addr == 0xFFFE) {
			// 	brk = true;
			// 	try {
			// 		// Thread.sleep(400);
			// 	}
			// 	catch (Exception e) {
			// 		System.out.println("Error in Thread.sleep(): " + e.getMessage());
			// 	}
			// }
		}

		public void memDump(int start, int end, int columns) {
			if (columns < 1) return;
			int startCbytes = start / columns * columns;
			int endCbytes = (end + columns - 1) / columns * columns;
			// System.out.printf("$%04X = ", startCbytes);
			for (int i = startCbytes; i < start; i++) {
				if (i % 256 == 0)
					System.out.printf("\nPAGE CROSS: ");
				if (i % columns == 0)
					System.out.printf("\n$%04X = ", i);
				System.out.printf("-- ");
			}
			for (int i = start; i <= end; i++) {
				if (i % 256 == 0)
					System.out.printf("\nPAGE CROSS: ");
				if (i % columns == 0)
					System.out.printf("\n$%04X = ", i);
				System.out.printf("\033[%dm%02X \033[0m", 40 + (ram[i] & 0x07), ram[i]);
			}
			for (int i = end + 1; i < endCbytes; i++) {
				if (i % 256 == 0)
					System.out.printf("\nPAGE CROSS: ");
				if (i % columns == 0)
					System.out.printf("\n$%04X = ", i);
				System.out.printf("-- ");
			}
			System.out.println();
		}

		public void display() {
			for (int i = 0x0200; i < 0x0600; i++) {
				int r = 0, g = 0, b = 0;
				char c = ' ';
				if (ram[i] < 8) {
					r = ((ram[i] & 1) != 0)? 0x88: 0x00;
					g = ((ram[i] & 2) != 0)? 0x88: 0x00;
					b = ((ram[i] & 4) != 0)? 0x88: 0x00;
				}
				else if (ram[i] < 16) {
					r = ((ram[i] & 1) != 0)? 0xCC: 0x00;
					g = ((ram[i] & 2) != 0)? 0xCC: 0x00;
					b = ((ram[i] & 4) != 0)? 0xCC: 0x00;
				}
				else if (ram[i] < 24) {
					r = ((ram[i] & 1) != 0)? 0xFF: 0x88;
					g = ((ram[i] & 2) != 0)? 0xFF: 0x88;
					b = ((ram[i] & 4) != 0)? 0xFF: 0x88;
				}
				else if (ram[i] < 32) {
					r = ((ram[i] & 1) != 0)? 0xFF: 0x44;
					g = ((ram[i] & 2) != 0)? 0xFF: 0x44;
					b = ((ram[i] & 4) != 0)? 0xFF: 0x44;
				}
				else if (ram[i] < 127) {
					c = (char) ram[i];
				}
				else if (ram[i] < 192) {
					r = ((ram[i] >> 0) & 3) * 0x55;
					g = ((ram[i] >> 2) & 3) * 0x55;
					b = ((ram[i] >> 4) & 3) * 0x55;
				}
				else {
					int greyscale = (ram[i] - 192) * 4;
					r = greyscale;
					g = greyscale;
					b = greyscale;
				}
				System.out.printf(
					"\033[48;2;%d;%d;%dm %c\033[0m",
					r, g, b, c
				);
				if ((i & 0x1F) == 0x1F)
					System.out.println();
			}
		}
	}

	public static void main(String[] args) {
		MyMapper mapper = new MyMapper();
		Chip65C02 chip = new Chip65C02(mapper);
		chip.setDebug(true);
		chip.setReset(false);
		chip.setReady(true);
		mapper.setChip(chip);
		while (true) {
			chip.tickClock();
		}
		// for (int i = 0; i < 20; i++) {
		// 	chip.tickClock();
		// }
		// mapper.memDump(0x0000, 0x09FF, 16);
	}
}